---
layout:	post
title:	"ทำไมถึง ❤️ Ruby on Rails"
date:	2017-11-21
tags: [ruby on rails]
---

  ช่วงไม่กี่เดือนที่ผ่านมา ได้มีโอกาสทำเว็บไซต์ใหม่จากเริ่มต้นที่เป็น Web Application ง่าย ๆ หลังจากที่ได้ลองมาหลายเฟรมเวิร์กทั้งทางฝั่ง Node (Express.js), Python (Django) หรือทางฝั่ง Java (Springboot, Play) ก็พบว่ามี Learning curve สูงใช้ได้สำหรับตัวเอง ดังนั้นก็เลยมาจบที่ RoR ที่จะมาเล่าให้ฟังในบทความนี้

สิ่งแรกที่เย้ายวนให้มาทาง RoR คือการที่มัน Generate code จำพวกที่เป็น CRUD ได้อย่างง่าย ๆ มาหมดทั้งตัว Model, View, Controller, Test และ Logic ที่เขียนไว้ให้ทำงานจบได้ในตัวมันเองอยู่แล้ว มันทำให้น่าสนใจมากเพราะโจทย์ตัวเว็บของเราไม่ได้ซับซ้อนมาก คาดว่า Scaffold ตามโมเดลแล้วก็จบ แต่เมื่อเริ่มจับแล้ว พบว่ามีอะไรที่ลึกซึ้งกว่านั้น..

### ความน่ารักเหนือคู่แข่ง

* **ดีพร้อม** เมื่อเทียบกับเฟรมเวิร์กอื่น ๆ แล้ว Rails เป็นเฟรมเวิร์กที่ครบเครื่องมาก ไม่ว่าจะเป็นส่วนของ ORM, Database Migration, SCSS, CoffeeScript, Template, Mailer และอื่น ๆ อีกมาก เรียกได้ว่าถ้าเราเลือกใช้เฟรมเวิร์กนี้แล้ว เราไม่ต้องหา Module อื่น ๆ มาเพิ่มเติมมากมายนักสำหรับการทำ Web Application ธรรมดา ๆ สักอันหนึ่ง
* **คุยกันได้, คุยกันง่าย** ด้วยตัวภาษา Ruby เองซึ่งเป็นภาษาที่ค่อนข้าง High level ทำให้ตัวโค้ดค่อนข้างสื่อความหมาย และตัวเฟรมเวิร์กเองก็ค่อนข้างจะตระเตรียมฟังก์ชันพื้นฐานให้ครบถ้วน ทำให้โค้ดที่เขียนเป็น Logic ทำได้สั้นและกระชับ นอกจากนี้ตัว Rails ยังเตรียม Console ไว้ เพื่อให้เราสามารถเขียนคำสั่งเพื่อจัดการกับ Model หรือลองส่วนของโค้ดได้ทันที
* **พร้อมขี่** นอกจากว่าผู้เขียนจะได้มีโอกาสทำเว็บใหม่ทั้งหมดจาก Rails แล้ว ผู้เขียนยังได้มีโอกาสที่จะนำเอาโปรเจค Open Source ที่ทำจาก RoR มา Custom พบว่าเราสามารถที่จะแก้โปรแกรมนั้นโดยเราเขียนโค้ดให้ "ขี่" อยู่บน Application เดิม ๆ ได้ โดยเราสามารถที่จะ Override class ในส่วนของ Logic หรือแม้แต่สั่งให้ Render หน้าเว็บเพจโดยแทรกส่วนที่เราต้องการเสริมไปอย่างเดียวก็ได้

### แต่มันก็ไม่ได้น่ารักไปซะหมด..

ครับ เหรียญมันก็ต้องมีสองด้าน ถึงจะดูน่ารักขนาดไหนแต่ลึก ๆ ลงไปก็จะเจอกับความดื้อรั้นให้หัวเสียเล่นอยู่บ้าง

* **ก้นใหญ่ย้ายยาก** ด้วยความที่เป็นภาษาอันแสนครบเครื่อง ดังนั้นในหนึ่งคำสั่งงาย ๆ ที่เราใช้ จะประกอบไปด้วยเวทย์มนต์แสนวิเศษที่ตัวเฟรมเวิร์กจัดเตรียมไว้ให้ ซึ่งบางทีก็จะดูเกินความจำเป็น และช้า (ซึ่งมีกระแสบ่นในเรื่องนี้เยอะมาก เมื่อมีคนพยายามถามว่า RoR น่าศึกษาไหม)
* **กว่าจะได้รักกัน** กว่าเราจะได้รักกัน เราก็ต้องจีบกันก่อนใช่ไหมครับ ช่วงจีบนี่เป็นอะไรที่นานมากกว่าเราจะได้เข้าใจกัน ด้วยความที่มันเน้นเรื่องของ Convention over Configuration คือบางอย่างเราก็ต้องทำตามมันครับ เพื่อที่จะให้ชีวิตการทำงานของเรามันราบรื่น ไม่ไปขัดขวางความมหัศจรรย์ของมัน ก็นับว่าเป็นเวลานานที่กว่าจะศึกษาดูใจกันครับ

### **สรุปน่าใช้ไหม?**

ตัว RoR นี่ผมว่าน่าใช้สำหรับงานสเกลระดับเล็ก ๆ ถึงกลาง ๆ ถึงแม้ว่าตัวมันจะมีกระแสว่าช้า แต่พอเอา RoR ไป Deploy เป็น Production แล้ว พบว่ามันก็ไม่ได้ช้ามากอย่างที่เค้าว่ากันนะครับ ตัว Resource ที่ใช้งานตอน Production ก็จะถูก Rails ทำการ Precompile ให้เราเรียบร้อย รวมถึงตัว DB ก็จะมีเรื่อง Cache เข้ามาช่วยแบบที่เราไม่ต้องจัดการเองเลยครับ เอาเป็นว่าใช้แล้วไม่ผิดหวังแน่นอนครับ

ต้องลองถึงจะรัก ❤️

  